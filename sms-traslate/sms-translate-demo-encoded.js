// generated by composer v0.7.0

const composition = {
    "type": "sequence",
    "components": [
        {
            "type": "function",
            "function": {
                "exec": {
                    "kind": "nodejs:default",
                    "code": "p => ({payload: p.Body, number: p.From})"
                }
            },
            "path": "[0]"
        },
        {
            "type": "let",
            "declarations": {
                "params": null
            },
            "components": [
                {
                    "type": "finally",
                    "body": {
                        "type": "function",
                        "function": {
                            "exec": {
                                "kind": "nodejs:default",
                                "code": "args => { params = args }"
                            }
                        }
                    },
                    "finalizer": {
                        "type": "sequence",
                        "components": [
                            {
                                "type": "mask",
                                "components": [
                                    {
                                        "type": "sequence",
                                        "components": [
                                            {
                                                "type": "function",
                                                "function": {
                                                    "exec": {
                                                        "kind": "nodejs:default",
                                                        "code": "args => ({ payload: args.payload })"
                                                    }
                                                },
                                                "path": "[1][0][0]"
                                            },
                                            {
                                                "type": "try",
                                                "body": {
                                                    "type": "sequence",
                                                    "components": [
                                                        {
                                                            "type": "let",
                                                            "declarations": {
                                                                "params": null
                                                            },
                                                            "components": [
                                                                {
                                                                    "type": "finally",
                                                                    "body": {
                                                                        "type": "function",
                                                                        "function": {
                                                                            "exec": {
                                                                                "kind": "nodejs:default",
                                                                                "code": "args => { params = args }"
                                                                            }
                                                                        }
                                                                    },
                                                                    "finalizer": {
                                                                        "type": "sequence",
                                                                        "components": [
                                                                            {
                                                                                "type": "mask",
                                                                                "components": [
                                                                                    {
                                                                                        "type": "action",
                                                                                        "name": "/_/watson-language/identify",
                                                                                        "path": "[1][0][1].body[0][0]"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "function",
                                                                                "function": {
                                                                                    "exec": {
                                                                                        "kind": "nodejs:default",
                                                                                        "code": "result => ({ params, result })"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "path": "[1][0][1].body[0]"
                                                        },
                                                        {
                                                            "type": "let",
                                                            "declarations": {
                                                                "params": null
                                                            },
                                                            "components": [
                                                                {
                                                                    "type": "finally",
                                                                    "body": {
                                                                        "type": "function",
                                                                        "function": {
                                                                            "exec": {
                                                                                "kind": "nodejs:default",
                                                                                "code": "args => { params = args }"
                                                                            }
                                                                        }
                                                                    },
                                                                    "finalizer": {
                                                                        "type": "if_nosave",
                                                                        "test": {
                                                                            "type": "mask",
                                                                            "components": [
                                                                                {
                                                                                    "type": "function",
                                                                                    "function": {
                                                                                        "exec": {
                                                                                            "kind": "nodejs:default",
                                                                                            "code": "p => p.result.language !== 'en'"
                                                                                        }
                                                                                    },
                                                                                    "path": "[1][0][1].body[1].test"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "consequent": {
                                                                            "type": "finally",
                                                                            "body": {
                                                                                "type": "function",
                                                                                "function": {
                                                                                    "exec": {
                                                                                        "kind": "nodejs:default",
                                                                                        "code": "() => params"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "finalizer": {
                                                                                "type": "mask",
                                                                                "components": [
                                                                                    {
                                                                                        "type": "sequence",
                                                                                        "components": [
                                                                                            {
                                                                                                "type": "function",
                                                                                                "function": {
                                                                                                    "exec": {
                                                                                                        "kind": "nodejs:default",
                                                                                                        "code": "p => ({ translateFrom: p.result.language, translateTo: 'en', payload: p.params.payload })"
                                                                                                    }
                                                                                                },
                                                                                                "path": "[1][0][1].body[1].consequent[0]"
                                                                                            },
                                                                                            {
                                                                                                "type": "action",
                                                                                                "name": "/_/watson-language/translate",
                                                                                                "path": "[1][0][1].body[1].consequent[1]"
                                                                                            }
                                                                                        ],
                                                                                        "path": "[1][0][1].body[1].consequent"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        },
                                                                        "alternate": {
                                                                            "type": "finally",
                                                                            "body": {
                                                                                "type": "function",
                                                                                "function": {
                                                                                    "exec": {
                                                                                        "kind": "nodejs:default",
                                                                                        "code": "() => params"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "finalizer": {
                                                                                "type": "mask",
                                                                                "components": [
                                                                                    {
                                                                                        "type": "sequence",
                                                                                        "components": [
                                                                                            {
                                                                                                "type": "function",
                                                                                                "function": {
                                                                                                    "exec": {
                                                                                                        "kind": "nodejs:default",
                                                                                                        "code": "p => ({payload: p.params.payload})"
                                                                                                    }
                                                                                                },
                                                                                                "path": "[1][0][1].body[1].alternate[0]"
                                                                                            },
                                                                                            {
                                                                                                "type": "action",
                                                                                                "name": "/_/sms-translate/en2shakespeare",
                                                                                                "path": "[1][0][1].body[1].alternate[1]"
                                                                                            }
                                                                                        ],
                                                                                        "path": "[1][0][1].body[1].alternate"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            "path": "[1][0][1].body[1]"
                                                        }
                                                    ],
                                                    "path": "[1][0][1].body"
                                                },
                                                "handler": {
                                                    "type": "function",
                                                    "function": {
                                                        "exec": {
                                                            "kind": "nodejs:default",
                                                            "code": "err => ({payload: 'Sorry, we cannot translate your text'})"
                                                        }
                                                    },
                                                    "path": "[1][0][1].handler"
                                                },
                                                "path": "[1][0][1]"
                                            }
                                        ],
                                        "path": "[1][0]"
                                    }
                                ]
                            },
                            {
                                "type": "function",
                                "function": {
                                    "exec": {
                                        "kind": "nodejs:default",
                                        "code": "result => ({ params, result })"
                                    }
                                }
                            }
                        ]
                    }
                }
            ],
            "path": "[1]"
        },
        {
            "type": "function",
            "function": {
                "exec": {
                    "kind": "nodejs:default",
                    "code": "({ params, result }) => ({ Body: result.payload, number: params.number })"
                }
            },
            "path": "[2]"
        },
        {
            "type": "action",
            "name": "/_/sms-translate/sendsms",
            "path": "[3]"
        }
    ],
    "path": ""
}

// do not edit below this point

const main=function(){const e=e=>"object"==typeof e&&null!==e&&!Array.isArray(e),t={sequence:e=>[{type:"pass",path:e.path
},...n(...e.components)],action:e=>[{type:"action",name:e.name,path:e.path}],async(e){const t=n(e.body);return[{type:"async",
path:e.path,return:t.length+2},...t,{type:"stop"},{type:"pass"}]},function:e=>[{type:"function",exec:e.function.exec,
path:e.path}],finally(e){const t=n(e.finalizer),s=[{type:"try",path:e.path},...n(e.body),{type:"exit"},...t]
;return s[0].catch=s.length-t.length,s},let:e=>[{type:"let",let:e.declarations,path:e.path},...n(...e.components),{type:"exit"
}],mask:e=>[{type:"let",let:null,path:e.path},...n(...e.components),{type:"exit"}],try(e){const t=[...n(e.handler),{type:"pass"
}],s=[{type:"try",path:e.path},...n(e.body),{type:"exit"},...t];return s[0].catch=s.length-t.length,
s[s.length-t.length-1].next=t.length,s},if_nosave(e){const t=n(e.consequent),s=[...n(e.alternate),{type:"pass"}],a=[{
type:"pass",path:e.path},...n(e.test),{type:"choice",then:1,else:t.length+1},...t,...s]
;return a[a.length-s.length-1].next=s.length,a},while_nosave(e){const t=n(e.body),s=[{type:"pass",path:e.path},...n(e.test),{
type:"choice",then:1,else:t.length+1},...t,{type:"pass"}];return s[s.length-2].next=2-s.length,s},dowhile_nosave(e){const t=[{
type:"pass",path:e.path},...n(e.body),...n(e.test),{type:"choice",else:1},{type:"pass"}];return t[t.length-2].then=2-t.length,t
}};function n(e){return 0===arguments.length?[{type:"empty"
}]:1===arguments.length?t[e.type](e):Array.prototype.reduce.call(arguments,(e,t)=>(e.push(...n(t)),e),[])}
const s=require("openwhisk");let a;const r={choice({p:e,node:t,index:n}){e.s.state=n+(e.params.value?t.then:t.else)},
try({p:e,node:t,index:n}){e.s.stack.unshift({catch:n+t.catch})},let({p:e,node:t,index:n}){e.s.stack.unshift({
let:JSON.parse(JSON.stringify(t.let))})},exit({p:e,node:t,index:n}){
if(0===e.s.stack.length)return i(`State ${n} attempted to pop from an empty stack`);e.s.stack.shift()},
action:({p:e,node:t,index:n})=>({action:t.name,params:e.params,state:{$resume:e.s}}),
function:({p:e,node:t,index:n})=>Promise.resolve().then(()=>(function(e,t){const n=[];let s=0
;for(let e of t.s.stack)null===e.let?s++:void 0!==e.let&&(0===s?n.push(e):s--);function a(e,t){
const s=n.find(t=>void 0!==t.let&&void 0!==t.let[e]);void 0!==s&&(s.let[e]=JSON.parse(JSON.stringify(t)))}
const r=n.reduceRight((e,t)=>t.let?Object.assign(e,t.let):e,{});let o="(function(){try{"
;for(const e in r)o+=`var ${e}=arguments[1]['${e}'];`;o+=`return eval((${e}))(arguments[0])}finally{`
;for(const e in r)o+=`arguments[1]['${e}']=${e};`;o+="}})";try{return(0,eval)(o)(t.params,r)}finally{for(const e in r)a(e,r[e])
}})(t.exec.code,e)).catch(e=>(console.error(e),{error:`An exception was caught at state ${n} (see log for details)`
})).then(t=>("function"==typeof t&&(t={error:`State ${n} evaluated to a function`}),
e.params=JSON.parse(JSON.stringify(void 0===t?e.params:t)),l(e),h(e))),empty({p:e,node:t,index:n}){l(e)},
pass({p:e,node:t,index:n}){},async:({p:e,node:t,index:n,inspect:r,step:o})=>(a||(a=s({ignore_certs:!0})),e.params.$resume={
state:e.s.state},e.s.state=n+t.return,a.actions.invoke({name:process.env.__OW_ACTION_NAME,params:e.params
}).catch(e=>(console.error(e),{error:`An exception was caught at state ${n} (see log for details)`})).then(t=>(e.params=t,r(e),
o(e)))),stop({p:e,node:t,index:n,inspect:s,step:a}){e.s.state=-1}},o=[]
;for(let{plugin:e,config:s}of arguments)e.compiler&&Object.assign(t,e.compiler({compile:n})),
e.conductor&&(Object.assign(r,e.conductor(s)),r._finish&&(o.push(r._finish),delete r._finish))
;const p=n(composition),c=e=>Promise.reject({code:400,error:e}),i=e=>Promise.reject((e=>({
code:"number"==typeof e.code&&e.code||500,
error:"string"==typeof e.error&&e.error||e.message||"string"==typeof e&&e||"An internal error occurred"}))(e));function l(t){
if(e(t.params)||(t.params={value:t.params}),void 0!==t.params.error)for(t.params={error:t.params.error},
t.s.state=-1;t.s.stack.length>0&&!((t.s.state=t.s.stack.shift().catch||-1)>=0););}function h(e){
if(e.s.state<0||e.s.state>=p.length)return console.log("Entering final state"),console.log(JSON.stringify(e.params)),
o.reduce((t,n)=>t.then(()=>n(e)),Promise.resolve()).then(()=>e.params.error?e.params:{params:e.params});const t=p[e.s.state]
;void 0!==t.path&&console.log(`Entering composition${t.path}`);const n=e.s.state;return e.s.state=e.s.state+(t.next||1),
r[t.type]({p:e,index:n,node:t,inspect:l,step:h})||h(e)}return t=>Promise.resolve().then(()=>(function(t){const n={s:{state:0,
stack:[]},params:t};if(void 0!==t.$resume){if(!e(t.$resume))return c("The type of optional $resume parameter must be object")
;const s=t.$resume.stack
;if(Object.assign(n.s,t.$resume),"number"!=typeof n.s.state)return c("The type of optional $resume.state parameter must be number")
;if(!Array.isArray(n.s.stack))return c("The type of optional $resume.stack parameter must be an array");delete t.$resume,
s&&l(n)}return h(n)})(t)).catch(i)}();
